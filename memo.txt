### docker利用のメモ ###

# バージョン確認
docker --version

【docker hubにログインしてイメージを取得】
# docker hubにログイン
docker login

# docker hubからイメージを取得
docker pull <image>


【Dockerfileをbuild】
# カレントディレクトリにあるDockerfileをbuildしイメージを作る
docker build -t <イメージ名> <ディレクトリ>
# 例：docker build -t test:latest .

# Dockerfileを指定してbuildしイメージを作る
docker build -f <Dockerfile名> -t <イメージ名> <ディレクトリ>
# 例：docker build -f ../Dockerfile.dev -t test:latest .


【コンテナ起動、コンテナ操作】
# ホストにあるdocker imageのリスト取得
docker images

# コンテナの詳細確認(割り当てられているリソース確認)
docker inspect <container>

# 存在するコンテナの確認
docker ps -a

# コンテナを作成して起動(create+start)
docker run <image>

# イメージをベースにした新しいDockerコンテナが起動し、そのコンテナ内で対話的なBashシェルが立ち上げ
docker run -it <image> bash

# コンテナに名前をつけて作成し、起動
docekr run --name <name> <image>

# ホストのファイルシステムをコンテナにマウント
# -v <host>:<container>
# new_dirが無くても作成される
docekr run -it -v ~/Desktop/mounted_dir:/mount_dir <image> bash

# ユーザーIDとグループIDを指定してコンテナをrunする
# -u <user id>:<group id>
docekr run -it -u $(id -u):$(id -g) -v ~/Desktop/mounted_dir:/mount_dir <image> bash

# ホストのポートをコンテナのポートに繋げる
# -p <host_port>:<container_port>
docker run -it -p 8888:8888 --rm jupyter/datascience-notebook bash

# リソース上限を設定
# --cpus <cpu物理コア数>
# --memory <byte>
docker run -it --cpus 2 --memory 2g <image> bash

# コンテナを起動後にdetachする(バックグラウンドで動かす)
docker run -d <image>

# コンテナをExit後に削除するようにして起動
docker run --rm <image>

# 作成済みのコンテナを起動する
docker restart <CONTAINER ID or NAMES>

# 既存の実行中のコンテナ内で新しいプロセスを開始
docker exec -it <CONTAINER ID> bash


【コンテナからイメージを作成し、docker hubにイメージのプッシュ】
# コンテナからイメージを作成
docker commit <CONTAINER ID> <イメージ名:タグ名>

# イメージ名を変更（<ユーザー名:リポジトリ名>が新しいイメージ名になる。）
※ docker hubを利用する場合
docker tag <元のイメージ名:元のタグ名> <ユーザー名:リポジトリ名>

# docker hubにイメージのプッシュ
docker push <image>


【イメージやコンテナの削除】
# イメージの削除
docker rmi <image>

# コンテナの削除
docker rm <CONTAINER ID>

# コンテナを止める
docker stop <CONTAINER ID>

# 止まっているコンテナの全削除
docker system prune